name: 🔄 Update Identity Mapping in JFrog on Issue Creation

on:
  workflow_call:


env:
  OIDC_PROVIDER: "mgmri-enterprise-oidc"
  JFROG_URL: "https://mgmresorts.jfrog.ioo"
  JFROG_API_KEY: "12345"
  GH_TOKEN: "12345"

jobs:
  automate-oidc-mapping:
    if: contains(github.event.issue.title, '[Automated Multi-Repo OIDC Mapping]')
    runs-on: ubuntu-latest

    steps:

    - name: Check out scripts
      uses: actions/checkout@v3

    - name: Parse issue body
      id: parse-issue-body
      uses: stefanbuck/github-issue-parser@v3

    - name: Build matrix
      uses: actions/github-script@v6
      id: json
      with:
        script: |
          let repositories = process.env.REPOSITORIES.replace(/\r/g, '').split('\n');
          let json = JSON.stringify(repositories);
          console.log(json);
          core.setOutput('repositories', json);
      env:
        REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser__repository_names }}

    - name: Set REPO_NAME, ORG_NAME Env Variable
      env:
        JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}
      run: |
        echo $JSON_STRING
        echo "REPO_NAMES=${{ steps.json.outputs.repository_names }}" >> $GITHUB_ENV
        echo "ORG_NAME=${{ fromJson(steps.parse-issue-body.outputs.jsonString)._organization_name }}" >> $GITHUB_ENV

    - name: Setup jq
      run: sudo apt-get install -y jq

    - name: ✏️ Update Issue Title
      uses: actions/github-script@v6
      with:
        script: |
          const org = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._organization_name }}`;
          const repo = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._repository_name }}`;
          const newTitle = `🔄 [Automate OIDC Mapping] Request for ${org}/${repo}`;

          await github.rest.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: newTitle
          });

    - name: 💬 Comment on Issue Title Update
      uses: actions/github-script@v6
      with:
        script: |
          const org = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._organization_name }}`;
          const repo = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._repository_name }}`;

          const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

          const body = `
          ### 📝 Issue Title Updated

          The issue title has been updated to reflect the identity mapping request for **${org}/${repo}**.

          🔗 [View this workflow run](${runUrl})
          `;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body
          });

    - name: 🧪 Validate GitHub Repository Exists
      id: validate-repo
      run: |
        echo "Checking if repository $ORG_NAME/$REPO_NAME exists..."

        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/$ORG_NAME/$REPO_NAME)

        if [ "$response" -eq 200 ]; then
          echo "✅ Repository exists: $ORG_NAME/$REPO_NAME"
          echo "repo_exists=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Repository does NOT exist: $ORG_NAME/$REPO_NAME"
          echo "repo_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: ✅ Confirm Repository Validation Passed
      if: steps.validate-repo.outputs.repo_exists != 'true'
      run: |
        echo "Repository does not exist. Exiting workflow."
        exit 1

    - name: 💬 Comment on Repository Validation Result
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const org = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._organization_name }}`;
          const repo = `${{ fromJson(steps.parse-issue-body.outputs.jsonString)._repository_name }}`;

          const repoExists = `${{ steps.validate-repo.outputs.repo_exists }}`;
          let message = '';

          if (repoExists === 'true') {
            message = `✅ GitHub repository **${org}/${repo}** exists. Proceeding with identity mapping.`;
          } else {
            message = `❌ GitHub repository **${org}/${repo}** was not found. Please double-check the organization and repository name.`;
          }

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### 📦 Repository Validation Result\n\n${message}`
          });

          // Close the issue
          if (message.startsWith("❌")) {
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed"
            });
          }

    - name: 🔎 Check if Identity Mapping Exists
      id: check
      run: |
        PROVIDER_NAME="$OIDC_PROVIDER"
        MAPPING_NAME="$ORG_NAME"

        echo "Fetching identity mapping..."
        STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" \
          -X GET "$JFROG_URL/access/api/v1/oidc/$PROVIDER_NAME/identity_mappings/$MAPPING_NAME" \
          -H "Authorization: Bearer $JFROG_API_KEY")

        if [ "$STATUS_CODE" -eq 200 ]; then
          echo "Mapping found"
          echo "exists=true" >> $GITHUB_OUTPUT
          MAPPING_DATA=$(cat response.json | jq -c '.')
          echo "mapping_data=$MAPPING_DATA" >> $GITHUB_OUTPUT
        else
          echo "Mapping not found"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

        echo "GitHub output file: $GITHUB_OUTPUT"
        cat "$GITHUB_OUTPUT"

    - name: 🛠️ Create or Update Identity Mapping
      id: update-mapping
      run: |
        cat <<EOF > new_mapping.json
        {
          "name": "$ORG_NAME",
          "description": "Identity mapping for $ORG_NAME",
          "claims": {
            "repository": ["$ORG_NAME/$REPO_NAME"]
          },
          "token_spec": {
            "username": "608965_mgmri",
            "scope": "applied-permissions/admin",
            "audience": "*@*",
            "expires_in": 3600
          },
          "priority": 1
        }
        EOF

        PROVIDER_NAME="$OIDC_PROVIDER"
        MAPPING_NAME="$ORG_NAME"
        RESULT_MESSAGE=""

        if [ "${{ steps.check.outputs.exists }}" = "true" ]; then
          echo "🔄 Updating identity mapping..."
          echo '${{ steps.check.outputs.mapping_data }}' \
          | jq --arg repo "${ORG_NAME}/${REPO_NAME}" '
              . as $data
              | if type == "array" then
                  $data[0] | .claims.repository += [$repo] | .claims.repository |= unique
                else
                  .claims.repository += [$repo] | .claims.repository |= unique
                end
          ' > updated_mapping.json

          HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null \
            -X PUT "$JFROG_URL/access/api/v1/oidc/$PROVIDER_NAME/identity_mappings/$MAPPING_NAME" \
            -H "Authorization: Bearer $JFROG_API_KEY" \
            -H "Content-Type: application/json" \
            -d @updated_mapping.json)

          if [ "$HTTP_STATUS" = "200" ]; then
            RESULT_MESSAGE="✅ Successfully updated identity mapping for $ORG_NAME"
          else
            RESULT_MESSAGE="❌ Failed to update mapping (HTTP $HTTP_STATUS)"
          fi
        else
          echo "🆕 Creating new identity mapping..."
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null \
            -X POST "$JFROG_URL/access/api/v1/oidc/$PROVIDER_NAME/identity_mappings" \
            -H "Authorization: Bearer $JFROG_API_KEY" \
            -H "Content-Type: application/json" \
            -d @new_mapping.json)

          if [ "$HTTP_STATUS" = "201" ]; then
            RESULT_MESSAGE="✅ Successfully created identity mapping for $ORG_NAME"
          else
            RESULT_MESSAGE="❌ Failed to create mapping (HTTP $HTTP_STATUS)"
          fi
        fi

        echo "result_message=$RESULT_MESSAGE" >> $GITHUB_OUTPUT

    - name: 💬 Comment and Close Issue
      uses: actions/github-script@v6
      with:
        script: |
          const resultMessage = `${{ steps.update-mapping.outputs.result_message }}`;
          const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

          const body = `
          ### 🛡️ Identity Mapping Result

          ${resultMessage}

          🔗 [View this workflow run](${runUrl})
          `;

          // Add a comment to the issue
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body
          });

          // Close the issue
          if (resultMessage.startsWith("✅")) {
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed"
            });
          }
