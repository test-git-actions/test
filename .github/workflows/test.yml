name: Run Python Script on Push

on:
  push:
    branches:
      - main  # Replace with the branch you want this workflow to trigger on

env:
  GITHUB_TOKEN: ${{ secrets.PAT }}

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Match the Python version used in your script

      # Step 2: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas tabulate

      # Step 3: Run the Python script
      - name: Fetch and process workflow data
        run: |
          python - <<'EOF'
          import requests
          import pandas as pd
          import os
          from tabulate import tabulate

          def workflow_run():
              auth = f"Bearer {os.getenv('GITHUB_TOKEN')}"
              url = "https://api.github.com/repos/MGMResorts/mgm-af-migrations-via-actions/actions/workflows/110635589/runs?per_page=200"
              headers = {
                  'Accept': 'application/vnd.github+json',
                  'Authorization': auth,
                  'X-GitHub-Api-Version': '2022-11-28'
              }
              response = requests.request("GET", url, headers=headers)
              runs = response.json()['workflow_runs']
              total_runs = len(runs)

              # Extract data and handle nested fields (actor.login)
              data = []
              for run in runs:
                  data.append({
                      'id': run['id'],
                      'name': run['name'],
                      'run_number': run['run_number'],
                      'status': run['status'],
                      'conclusion': run['conclusion'],
                      'actor_login': run['actor']['login'] if run.get('actor') else 'N/A'
                  })

              # Create DataFrame
              df = pd.DataFrame(data)
              total_keys = len(df.columns)  # Calculate the number of columns (keys)

              # Print the number of keys and total runs to the console
              print(f"Total Workflow Runs: {total_runs}")
              print(f"Total number of keys in data: {total_keys}")

              # Save to CSV
              df.to_csv("workflow_runs.csv", sep='\t', encoding='utf-8', index=True, header=True)

              # Generate Markdown table
              markdown_table = tabulate(
                  df.head(10),  # Limit to the top 10 rows for display
                  headers="keys",
                  tablefmt="github",
                  showindex=False
              )

              # Write to summary
              with open("summary.md", "w") as summary_file:
                  summary_file.write("# Workflow Runs Summary\n\n")
                  summary_file.write(f"**Total Workflow Runs: {total_runs}**\n")
                  summary_file.write(f"**Total Keys in Data: {total_keys}**\n\n")
                  summary_file.write(markdown_table)

          if __name__ == "__main__":
              workflow_run()
              print("Data fetched and summary generated successfully")
          EOF

        env:
          GITHUB_PAT: ${{ secrets.GITHUB_PAT }}

      # Step 4: Upload the summary to GitHub Actions
      - name: Add summary to workflow
        run: cat summary.md >> $GITHUB_STEP_SUMMARY
