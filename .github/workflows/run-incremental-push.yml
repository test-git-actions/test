name: Run Incremental Push

on:
  workflow_call:

permissions:
  contents: write
  actions: write
  pull-requests: write
  issues: write

jobs:
  incremental_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out scripts
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - run: echo $JSON_STRING
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - name: Extract Schedule Cron Expression
        id: extract-cron
        run: |
          case "${{ fromJson(steps.parse-issue-body.outputs.jsonString).schedule_duration }}" in
            "2 minutes")   CRON="*/2 * * * *" ;;
            "10 minutes")  CRON="*/10 * * * *" ;;
            "30 minutes")  CRON="*/30 * * * *" ;;
            "60 minutes")  CRON="0 * * * *" ;;  # Every hour
            "2 hours")     CRON="0 */2 * * *" ;;
            "4 hours")     CRON="0 */4 * * *" ;;
            "8 hours")     CRON="0 */8 * * *" ;;
            "24 hours")    CRON="0 0 * * *" ;;  # Midnight every day
            *)             CRON="0 0 * * *" ;;  # Midnight every day
          esac
          echo "CRON=$CRON" >> $GITHUB_ENV

      - name: Modify Workflow File
        env:
          SOURCE_ORG: test-git-actions
          REPO_NAME: fromJson(steps.parse-issue-body.outputs.jsonString).repository_name
          TARGET_ORG: fromJson(steps.parse-issue-body.outputs.jsonString).target_organization
        run: |
            script_file=".github/scripts/github_migrate.sh"
            workflow_file=".github/workflows/incremental_push.yml"
            target_git="github.com/${{ env.SOURCE_ORG }}/${{ env.REPO_NAME }}.git"

            git clone --depth=1 "https://${{ secrets.GH_PAT }}@$target_git" ${{ env.REPO_NAME }}
            cd ${{ env.REPO_NAME }}

            # Ensure .github/scripts directory exists
            mkdir -p .github/scripts

            # Remove old script if it exists
            [ -f "$script_file" ] && rm -f "$script_file"

            # Configure Git locally
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"

            # Copy the new script if it exists
            if [ -f "../$script_file" ]; then
              tmp_file=$(mktemp)  # Create a temp file
              cp "../$workflow_file" "$tmp_file"

              # Apply sed modifications on the temp file only
              sed -i '0,/^name: .*/s/^name: .*/name: "Incremental GitHub Sync - ${{ env.REPO_NAME }}"/' "$tmp_file"          
              sed -i 's/TARGET_ORG: ""/TARGET_ORG: "${{ env.TARGET_ORG }}"/' "$tmp_file"
              sed -i 's/REPO_NAME: ""/REPO_NAME: "${{ env.REPO_NAME }}"/' "$tmp_file"

              # Copy modified temp file to the repo without modifying the original
              cp "$tmp_file" ".github/workflows/incremental_push.yml"

              # Stage the modified file for commit
              git add ".github/workflows/incremental_push.yml"

              # Remove temp file
              rm "$tmp_file"
            else
              echo "Error: $script_file not found!" >&2
              exit 1
            fi

            # Copy the workflow file
            if [ -f "../$workflow_file" ]; then
              cp "../$workflow_file" ".github/workflows/"
              git add ".github/workflows/incremental_push.yml"
            else
              echo "Error: $workflow_file not found!" >&2
              exit 1
            fi

            # Check if there are changes before committing
            if git diff --cached --quiet; then
              echo "No changes to commit."
              exit 0
            fi

            git commit -m "Add incremental sync workflow for ${{ env.REPO_NAME }}"

            # Push changes with error handling
            if ! git push; then
              echo "Error: Git push failed!" >&2
              exit 1
            fi

          
      # - name: Commit and Push Changes
      #   env:
      #     GH_PAT: ${{ secrets.GH_PAT }}
      #   run: |
      #       git config --global user.name "github-actions[bot]"
      #       git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #       git fetch origin
      #       git status
        
      #       # Check if there are any changes to commit
      #       if [[ -n "$(git status --porcelain)" ]]; then
      #         git add .
      #         git commit -m "Automated commit by GitHub Actions"
      #         git push
      #       else
      #         echo "No changes detected. Exiting."
      #         exit 0  # Exit with code 0 to indicate no error
      #       fi

      # - name: Trigger Incremental GitHub Sync workflow
        # env:
        #   GH_TOKEN: ${{ secrets.GH_PAT }}
        # run: |
        #   gh api \
        #     --method POST \
        #     -H "Accept: application/vnd.github+json" \
        #     -H "X-GitHub-Api-Version: 2022-11-28" \
        #     /repos/${{ github.repository }}/actions/workflows/incremental-sync-job.yml/dispatches \
        #     -f ref=main \
        #     -f "inputs[target_org]=${{ fromJson(steps.parse-issue-body.outputs.jsonString).target_organization }}" \
        #     -f "inputs[source_org]=MGMResorts" \
        #     -f "inputs[repo_name]=${{ fromJson(steps.parse-issue-body.outputs.jsonString).repository_name }}" \
        #     --header "Authorization: token $GH_TOKEN"

      # - name: Trigger Incremental GitHub Sync
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: incremental-sync-job.yml
      #     token: ${{ secrets.GH_PAT }}
      #     inputs: '{"target_org": "MyTargetOrg", "repo_name": "MyRepo", "source_org": "MGMResorts"}'

      # - name: Schedule the Job - Incremental Push
      #   uses: peter-evans/repository-dispatch@v1
      #   with:
      #       token: ${{ secrets.GITHUB_TOKEN }}
      #       event-type: incremental-push-job
      #       client-payload: |
      #           {
      #             "src_org": "MGMResorts",
      #             "target_org": "${{ fromJson(steps.parse-issue-body.outputs.jsonString).target_organization }}",
      #             "repo_name": "${{ fromJson(steps.parse-issue-body.outputs.jsonString).repository_name }}",
      #             "schedule_duration": "${{ fromJson(steps.parse-issue-body.outputs.jsonString).schedule_duration }}"
      #           }

