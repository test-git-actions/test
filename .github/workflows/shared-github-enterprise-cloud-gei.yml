name: Shared GitHub Enterprise Cloud GEI Migration

on:
  workflow_call:
            
permissions:
  contents: read
  issues: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.json.outputs.repositories }}
      migration-type: ${{ steps.migration-type.outputs.result }}
      locksourcerepo: ${{ steps.json.outputs.lock_source_repository }}    
      AZURE_DEVOPS_ORG: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_organization }}
      AZURE_DEVOPS_PROJECT: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_project }}
      ADO2GHA_DOWNLOAD_BRANCH: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).ado2gha_download_branch }}
      parsed-issue: ${{ steps.parse-issue-body.outputs.jsonString }}

    if: github.event_name == 'issue_comment' &&
      (contains(github.event.comment.body, '/run-dry-run-migration') ||
      contains(github.event.comment.body, '/run-production-migration'))
    steps:         
      - name: Check out scripts
        uses: actions/checkout@v3

      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - run: echo $JSON_STRING
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - name: Debug Parsed Values
        run: |
          echo "Parsed Azure DevOps Org: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_organization }}"
          echo "Parsed Azure DevOps Project: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).azure_devops_project }}"
          echo "Parsed ado2gha download branch: ${{ fromJson(steps.parse-issue-body.outputs.jsonString).ado2gha_download_branch }}"
  
      - name: Set migration type
        uses: actions/github-script@v6
        id: migration-type
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Set Lock Source Repo
        uses: actions/github-script@v6
        id: locksourcerepo
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('Yes') ? 'Yes' : 'No'

      - name: Add migration comment
        uses: actions/github-script@v6
        with:
          script: |
            const body = `:hourglass: **${{ steps.migration-type.outputs.result }} migration in progress.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Build matrix
        uses: actions/github-script@v6
        id: json
        with:
          script: |
            let repositories = process.env.REPOSITORIES.replace(/\r/g, '').split('\n');
            let json = JSON.stringify(repositories);
            console.log(json);
            core.setOutput('repositories', json);
        env:
          REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}

  migrate:
    name: GEI
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix: 
        repository: ${{ fromJson(needs.prepare.outputs.repositories) }}
      fail-fast: false
      max-parallel: 15

    timeout-minutes: 50400
    
    env:
      INSTALL_PREREQS: 'true'

    outputs:
      repo_name: ${{ steps.save-repo-details.outputs.repo_name }}
      repo_org: ${{ steps.save-repo-details.outputs.repo_org }}
      target_org: ${{ steps.save-repo-details.outputs.target_org }}

    steps:
      - name: Check Lock Source Repository Value
        if: fromJson(needs.prepare.outputs.parsed-issue).lock_source_repository == 'Yes'
        run: |
            echo "Locking the source repository after migration."
      
      - name: Check out scripts
        uses: actions/checkout@v3

      # - name: Install common dependencies
      #   if: ${{ env.INSTALL_PREREQS == 'true' }}
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install --yes git unzip curl wget
   
          - name: Save repo details to variables
          if: always()
          id: save-repo-details
          run: |
            reponame=$(basename ${{ matrix.repository }})
            repoorg=$(basename $(dirname ${{ matrix.repository }}))
            targetorg="${{ fromJson(needs.prepare.outputs.parsed-issue).target_organization }}"
  
            echo "REPO_NAME=$reponame" >> "$GITHUB_ENV"
            echo "REPO_ORG=$repoorg" >> "$GITHUB_ENV"
            echo "TARGET_ORG=$targetorg" >> "$GITHUB_ENV"
  
            echo "repo_name=$reponame" >> "$GITHUB_OUTPUT"
            echo "repo_org=$repoorg" >> "$GITHUB_OUTPUT"
            echo "target_org=$targetorg" >> "$GITHUB_OUTPUT"
  
            echo "Saved details: Repo_Name=$reponame, Repo_Org=$repoorg, Target_Org=$targetorg"
          
  ADO2GHA-Migration2_0:
    runs-on: ubuntu-latest
    needs: [prepare, migrate]

    steps:
      - name: Use Azure DevOps Inputs
        run: |
            echo "Azure DevOps Org: ${{ needs.prepare.outputs.AZURE_DEVOPS_ORG }}"
            echo "Azure DevOps Project: ${{ needs.prepare.outputs.AZURE_DEVOPS_PROJECT }}"
            echo "Azure DevOps Project: ${{ needs.prepare.outputs.ADO2GHA_DOWNLOAD_BRANCH }}"
        
      - name: Print Variables
        run: |
            echo "Repository Name: ${{ needs.migrate.outputs.repo_name }}"
            echo "Repository Org: ${{ needs.migrate.outputs.repo_org }}"
            echo "Target Org: ${{ needs.migrate.outputs.target_org }}"
        
      - name: Trigger Commit-history-mapping in Target
        uses: peter-evans/repository-dispatch@v1
        with:
            token: ${{ secrets.SOURCE_ADMIN_TOKEN }}
            event-type: ADO2GHA-Migration2_0
            client-payload: |
                {
                    "repo_name": "${{ needs.migrate.outputs.repo_name }}",
                    "repo_org": "${{ needs.migrate.outputs.repo_org }}",
                    "target_org": "${{ needs.migrate.outputs.target_org }}",
                    "AZURE_DEVOPS_ORG": "${{ needs.prepare.outputs.AZURE_DEVOPS_ORG }}",
                    "AZURE_DEVOPS_PROJECT": "${{ needs.prepare.outputs.AZURE_DEVOPS_PROJECT }}",
                    "ADO2GHA_DOWNLOAD_BRANCH": "${{ needs.prepare.outputs.ADO2GHA_DOWNLOAD_BRANCH }}",
                    "PIPELINE_ACTION": "${{ needs.prepare.outputs.PIPELINE_ACTION }}",
                    "PIPELINE_ID": "${{ needs.prepare.outputs.PIPELINE_ID }}"
                }
    
    
