name: Get GitHub App Installations and Repositories

on:
  workflow_dispatch:
    inputs:
      source_org:
        description: 'Enter the GitHub organization name'
        required: true
        default: 'test-git-actions'
      github_token:
        description: 'Enter your GitHub token'
        required: false

env:
  BASE_GITHUB_API_URL: "https://api.github.com"
  INSTALLATIONS_ENDPOINT: "/orgs/${{ github.event.inputs.source_org }}/installations"
  REPOS_ENDPOINT: "/orgs/${{ github.event.inputs.source_org }}/repos"

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Log input variables
        run: |
          echo "Source Organization: ${{ github.event.inputs.source_org }}"
          echo "GitHub Token: [REDACTED]"

      - name: Install dependencies
        run: npm install axios

      - name: Fetch GitHub App installations and repositories
        env:
          SOURCE_ORG: ${{ github.event.inputs.source_org }}
          GITHUB_TOKEN: ${{ github.event.inputs.github_token || secrets.PAT }}
          BASE_GITHUB_API_URL: ${{ env.BASE_GITHUB_API_URL }}
          INSTALLATIONS_ENDPOINT: ${{ env.INSTALLATIONS_ENDPOINT }}
          REPOS_ENDPOINT: ${{ env.REPOS_ENDPOINT }}
        run: |
          node -e "
          const axios = require('axios');
          const { BASE_GITHUB_API_URL, INSTALLATIONS_ENDPOINT, REPOS_ENDPOINT, GITHUB_TOKEN } = process.env;

          const fetchData = async (endpoint, description) => {
              try {
                  const response = await axios.get(\`\${BASE_GITHUB_API_URL}\${endpoint}\`, {
                      headers: {
                          Authorization: \`Bearer \${GITHUB_TOKEN}\`,
                          Accept: 'application/vnd.github.v3+json',
                      },
                  });
                  return response.data;
              } catch (error) {
                  console.error(\`Error fetching \${description}: \`, error.response ? error.response.data : error.message);
                  throw new Error(\`Failed to fetch \${description}\`);
              }
          };

          const logInstallations = (installations) => {
              console.log(\`===================Installed Apps====================\`);
              installations.forEach((installation) => {
                  console.log(\`App Name: \${installation.app_slug}, App ID: \${installation.id}\`);
              });
              console.log(\`=====================================================\`);
          };

          const logRepositories = (repos) => {
              console.log(\`===================Repo List=========================\`);
              repos.forEach((repo) => {
                  console.log(\`[ Repo Name: \${repo.name}, Repo ID: \${repo.id} ]\`);
              });
              console.log(\`=====================================================\`);
          };

          (async () => {
              const installations = await fetchData(INSTALLATIONS_ENDPOINT, 'GitHub App installations');
              logInstallations(Array.isArray(installations) ? installations : installations.installations);

              const repositories = await fetchData(REPOS_ENDPOINT, 'repositories');
              logRepositories(repositories);
          })();
          "
