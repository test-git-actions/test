name: "Extract Org and Fetch GitHub Data"
on:
  issues:
    types: [opened, edited]

env:
  BASE_GITHUB_API_URL: "https://api.github.com"

jobs:
  extract-and-fetch:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Extract org name and token using GitHub Script
      - name: Extract Org and Token
        id: extract_data
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body;
            
            // Extract org name and token from the issue body using regex
            const orgNameMatch = issueBody.match(/Enter the GitHub organization name\s*\n*(.*)/);
            const tokenMatch = issueBody.match(/Enter your GitHub token\s*\n*(.*)/);

            const orgName = orgNameMatch ? orgNameMatch[1].trim() : "";
            const token = tokenMatch ? tokenMatch[1].trim() : "";

            core.setOutput("org_name", orgName);
            core.setOutput("token", token);

      # Step 2: Print extracted values (for debugging)
      - name: Print extracted values
        run: |
          echo "Organization: ${{ steps.extract_data.outputs.org_name }}"
          echo "Token: [REDACTED]"
        env:
          ORG_NAME: ${{ steps.extract_data.outputs.org_name }}
          TOKEN: ${{ steps.extract_data.outputs.token }}

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 4: Install Axios dependency
      - name: Install dependencies
        run: npm install axios

      # Step 5: Fetch GitHub App installations and repositories using the extracted data
      - name: Fetch GitHub App installations and repositories
        env:
          SOURCE_ORG: ${{ steps.extract_data.outputs.org_name }}
          GITHUB_TOKEN: ${{ steps.extract_data.outputs.token }}
          BASE_GITHUB_API_URL: ${{ env.BASE_GITHUB_API_URL }}
          INSTALLATIONS_ENDPOINT: "/orgs/${{ steps.extract_data.outputs.org_name }}/installations"
          REPOS_ENDPOINT: "/orgs/${{ steps.extract_data.outputs.org_name }}/repos"
        run: |
          node -e "
          const axios = require('axios');
          const { BASE_GITHUB_API_URL, INSTALLATIONS_ENDPOINT, REPOS_ENDPOINT, GITHUB_TOKEN } = process.env;

          const fetchData = async (endpoint, description) => {
              try {
                  const response = await axios.get(\`\${BASE_GITHUB_API_URL}\${endpoint}\`, {
                      headers: {
                          Authorization: \`Bearer \${GITHUB_TOKEN}\`,
                          Accept: 'application/vnd.github.v3+json',
                      },
                  });
                  return response.data;
              } catch (error) {
                  console.error(\`Error fetching \${description}: \`, error.response ? error.response.data : error.message);
                  throw new Error(\`Failed to fetch \${description}\`);
              }
          };

          const logInstallations = (installations) => {
              console.log(\`===================Installed Apps====================\`);
              installations.forEach((installation) => {
                  console.log(\`App Name: \${installation.app_slug}, App ID: \${installation.id}\`);
              });
              console.log(\`=====================================================\`);
          };

          const logRepositories = (repos) => {
              console.log(\`===================Repo List=========================\`);
              repos.forEach((repo) => {
                  console.log(\`[ Repo Name: \${repo.name}, Repo ID: \${repo.id} ]\`);
              });
              console.log(\`=====================================================\`);
          };

          (async () => {
              const installations = await fetchData(INSTALLATIONS_ENDPOINT, 'GitHub App installations');
              logInstallations(Array.isArray(installations) ? installations : installations.installations);

              const repositories = await fetchData(REPOS_ENDPOINT, 'repositories');
              logRepositories(repositories);
          })();
          "
